//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\nmsoltan using Mcit Generator
// Class Name:		glossary_DB
// Date Generated:	08-08-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class glossary_DB
    {

        #region "Private methods"

        private static glossary_DT FillInfoObject(SqlDataReader dr)
        {

           glossary_DT obj_glossary_DT = new glossary_DT();

           
		obj_glossary_DT.highlight = dr[glossary_DT.Enum_glossary_DT.highlight.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.highlight.ToString()]);
		obj_glossary_DT.highlight_panorama = dr[glossary_DT.Enum_glossary_DT.highlight_panorama.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.highlight_panorama.ToString()]);
		obj_glossary_DT.id = Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.id.ToString()]);
		obj_glossary_DT.form_status = dr[glossary_DT.Enum_glossary_DT.form_status.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.form_status.ToString()]);
		obj_glossary_DT.file_status = dr[glossary_DT.Enum_glossary_DT.file_status.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.file_status.ToString()]);
		obj_glossary_DT.period_id = dr[glossary_DT.Enum_glossary_DT.period_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.period_id.ToString()]);
		obj_glossary_DT.assigned_to = dr[glossary_DT.Enum_glossary_DT.assigned_to.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.assigned_to.ToString()]);
		obj_glossary_DT.lock_files = dr[glossary_DT.Enum_glossary_DT.lock_files.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.lock_files.ToString()]);
		obj_glossary_DT.form_lock = dr[glossary_DT.Enum_glossary_DT.form_lock.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.form_lock.ToString()]);
		obj_glossary_DT.form_status_en = dr[glossary_DT.Enum_glossary_DT.form_status_en.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.form_status_en.ToString()]);
		obj_glossary_DT.form_lock_en = dr[glossary_DT.Enum_glossary_DT.form_lock_en.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.form_lock_en.ToString()]);
		obj_glossary_DT.form_status_fr = dr[glossary_DT.Enum_glossary_DT.form_status_fr.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.form_status_fr.ToString()]);
		obj_glossary_DT.form_lock_fr = dr[glossary_DT.Enum_glossary_DT.form_lock_fr.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[glossary_DT.Enum_glossary_DT.form_lock_fr.ToString()]);
		obj_glossary_DT.form_file = dr[glossary_DT.Enum_glossary_DT.form_file.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[glossary_DT.Enum_glossary_DT.form_file.ToString()]);
		obj_glossary_DT.small_image = dr[glossary_DT.Enum_glossary_DT.small_image.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[glossary_DT.Enum_glossary_DT.small_image.ToString()]);
		obj_glossary_DT.large_image = dr[glossary_DT.Enum_glossary_DT.large_image.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[glossary_DT.Enum_glossary_DT.large_image.ToString()]);
		obj_glossary_DT.form_file_en = dr[glossary_DT.Enum_glossary_DT.form_file_en.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[glossary_DT.Enum_glossary_DT.form_file_en.ToString()]);
		obj_glossary_DT.form_file_fr = dr[glossary_DT.Enum_glossary_DT.form_file_fr.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[glossary_DT.Enum_glossary_DT.form_file_fr.ToString()]);

           return obj_glossary_DT;
        }

        private static SqlParameter[] GetParameters(glossary_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[18];
           
			

        parms[0] = new SqlParameter(glossary_DT.Enum_glossary_DT.highlight.ToString(), obj.highlight);

        parms[1] = new SqlParameter(glossary_DT.Enum_glossary_DT.highlight_panorama.ToString(), obj.highlight_panorama);
        

        parms[2] = new SqlParameter(glossary_DT.Enum_glossary_DT.id.ToString(), obj.id);
        parms[2].Direction = ParameterDirection.InputOutput;

        parms[3] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_status.ToString(), obj.form_status);

        parms[4] = new SqlParameter(glossary_DT.Enum_glossary_DT.file_status.ToString(), obj.file_status);

        parms[5] = new SqlParameter(glossary_DT.Enum_glossary_DT.period_id.ToString(), obj.period_id);

        parms[6] = new SqlParameter(glossary_DT.Enum_glossary_DT.assigned_to.ToString(), obj.assigned_to);

        parms[7] = new SqlParameter(glossary_DT.Enum_glossary_DT.lock_files.ToString(), obj.lock_files);

        parms[8] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_lock.ToString(), obj.form_lock);

        parms[9] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_status_en.ToString(), obj.form_status_en);

        parms[10] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_lock_en.ToString(), obj.form_lock_en);

        parms[11] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_status_fr.ToString(), obj.form_status_fr);

        parms[12] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_lock_fr.ToString(), obj.form_lock_fr);

        parms[13] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_file.ToString(), obj.form_file);

        parms[14] = new SqlParameter(glossary_DT.Enum_glossary_DT.small_image.ToString(), obj.small_image);

        parms[15] = new SqlParameter(glossary_DT.Enum_glossary_DT.large_image.ToString(), obj.large_image);

        parms[16] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_file_en.ToString(), obj.form_file_en);

        parms[17] = new SqlParameter(glossary_DT.Enum_glossary_DT.form_file_fr.ToString(), obj.form_file_fr);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(glossary_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "glossary_Save", parms);

             	    obj.id = Convert.ToInt32(parms[2].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int glossary_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "glossary_Delete", glossary_ID);
                return glossary_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "glossary_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static glossary_DT SelectByID(int glossary_ID)
        {
            try
            {
              if (glossary_ID > 0)
                {
                SqlDataReader drTableName;
                glossary_DT oInfo_glossary_DT = new glossary_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "glossary_Select", glossary_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_glossary_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_glossary_DT;
               }
                else
                    return new glossary_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

