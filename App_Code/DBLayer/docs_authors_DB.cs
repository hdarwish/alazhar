//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\arezk using Mcit Generator
// Class Name:		docs_authors_DB
// Date Generated:	24-01-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class docs_authors_DB
    {

        #region "Private methods"

        private static docs_authors_DT FillInfoObject(SqlDataReader dr)
        {

           docs_authors_DT obj_docs_authors_DT = new docs_authors_DT();

        obj_docs_authors_DT.id = Convert.ToInt32(dr[docs_authors_DT.Enum_docs_authors_DT.id.ToString()]);
   
		obj_docs_authors_DT.is_character = dr[docs_authors_DT.Enum_docs_authors_DT.is_character.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[docs_authors_DT.Enum_docs_authors_DT.is_character.ToString()]);
		obj_docs_authors_DT.doc_id = dr[docs_authors_DT.Enum_docs_authors_DT.doc_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[docs_authors_DT.Enum_docs_authors_DT.doc_id.ToString()]);
		obj_docs_authors_DT.author_id = dr[docs_authors_DT.Enum_docs_authors_DT.author_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[docs_authors_DT.Enum_docs_authors_DT.author_id.ToString()]);
		obj_docs_authors_DT.relation_title_ar = dr[docs_authors_DT.Enum_docs_authors_DT.relation_title_ar.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[docs_authors_DT.Enum_docs_authors_DT.relation_title_ar.ToString()]);
		obj_docs_authors_DT.relation_title_en = dr[docs_authors_DT.Enum_docs_authors_DT.relation_title_en.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[docs_authors_DT.Enum_docs_authors_DT.relation_title_en.ToString()]);
		obj_docs_authors_DT.relation_title_fr = dr[docs_authors_DT.Enum_docs_authors_DT.relation_title_fr.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[docs_authors_DT.Enum_docs_authors_DT.relation_title_fr.ToString()]);
        obj_docs_authors_DT.role_id = dr[docs_authors_DT.Enum_docs_authors_DT.role_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[docs_authors_DT.Enum_docs_authors_DT.role_id.ToString()]);
        obj_docs_authors_DT.author_type_id = dr[docs_authors_DT.Enum_docs_authors_DT.author_type_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[docs_authors_DT.Enum_docs_authors_DT.author_type_id.ToString()]);

           return obj_docs_authors_DT;
        }

        private static SqlParameter[] GetParameters(docs_authors_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[9];


            parms[0] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.id.ToString(), obj.id);
            parms[0].Direction = ParameterDirection.InputOutput;
        parms[1] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.is_character.ToString(), obj.is_character);

        parms[2] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.doc_id.ToString(), obj.doc_id);

        parms[3] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.author_id.ToString(), obj.author_id);

        parms[4] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.relation_title_ar.ToString(), obj.relation_title_ar);

        parms[5] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.relation_title_en.ToString(), obj.relation_title_en);

        parms[6] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.relation_title_fr.ToString(), obj.relation_title_fr);
parms[7] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.author_type_id.ToString(), obj.author_type_id);

        parms[8] = new SqlParameter(docs_authors_DT.Enum_docs_authors_DT.role_id.ToString(), obj.role_id);
       
 
            return parms;
        }

        #endregion

	#region "DB methods"

        public static int Save(docs_authors_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "docs_authors_Save", parms);
                return Convert.ToInt32(parms[0].Value);
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int docs_authors_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "docs_authors_Delete", docs_authors_ID);
                return docs_authors_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "docs_authors_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }
        public static DataTable SelectByIDIsAuthor(int ID)
        {
            try
            {
                

                return SqlHelper.ExecuteDataset(Database.ConnectionString, "docs_isauthors_Select", ID).Tables[0];
                
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static docs_authors_DT SelectByID(int docs_authors_ID)
        {
            try
            {
                SqlDataReader drTableName;
                docs_authors_DT oInfo_docs_authors_DT = new docs_authors_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "docs_authors_Select", docs_authors_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_docs_authors_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_docs_authors_DT;
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

