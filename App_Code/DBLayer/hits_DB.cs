//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\nmsoltan using Mcit Generator
// Class Name:		hits_DB
// Date Generated:	14-03-2013
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class hits_DB
    {

        #region "Private methods"

        private static hits_DT FillInfoObject(SqlDataReader dr)
        {

           hits_DT obj_hits_DT = new hits_DT();

           
		obj_hits_DT.id = Convert.ToInt32(dr[hits_DT.Enum_hits_DT.id.ToString()]);
		obj_hits_DT.cont_id = dr[hits_DT.Enum_hits_DT.cont_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[hits_DT.Enum_hits_DT.cont_id.ToString()]);
		obj_hits_DT.cont_type = dr[hits_DT.Enum_hits_DT.cont_type.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[hits_DT.Enum_hits_DT.cont_type.ToString()]);
		obj_hits_DT.hit_count = dr[hits_DT.Enum_hits_DT.hit_count.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[hits_DT.Enum_hits_DT.hit_count.ToString()]);

           return obj_hits_DT;
        }

        private static SqlParameter[] GetParameters(hits_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[4];
           
			
        

        parms[0] = new SqlParameter(hits_DT.Enum_hits_DT.id.ToString(), obj.id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(hits_DT.Enum_hits_DT.cont_id.ToString(), obj.cont_id);

        parms[2] = new SqlParameter(hits_DT.Enum_hits_DT.cont_type.ToString(), obj.cont_type);

        parms[3] = new SqlParameter(hits_DT.Enum_hits_DT.hit_count.ToString(), obj.hit_count);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(hits_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "hits_Save", parms);

             	    obj.id = Convert.ToInt32(parms[0].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int hits_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "hits_Delete", hits_ID);
                return hits_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "hits_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static hits_DT SelectByID(int cont_id,int cont_type)
        {
            try
            {
                if (cont_type > 0)
                {
                SqlDataReader drTableName;
                hits_DT oInfo_hits_DT = new hits_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "hits_Select", cont_id, cont_type);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_hits_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_hits_DT;
               }
                else
                    return new hits_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion




        public static hits_DT SelectByType_ID(int cont_type)
        {
            try
            {
                if (cont_type > 0)
                {
                    SqlDataReader drTableName;
                    hits_DT oInfo_hits_DT = new hits_DT();

                    drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "hits_Count_Select", cont_type);
                    if (drTableName != null)
                    {
                        while (drTableName.Read())
                        {
                            oInfo_hits_DT = FillInfoObject(drTableName);
                        }

                        drTableName.Close();
                    }
                    return oInfo_hits_DT;
                }
                else
                    return new hits_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }

    }

