//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\hdarwish using Mcit Generator
// Class Name:		contents_notes_DB
// Date Generated:	02-07-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class contents_notes_DB
    {

        #region "Private methods"

        private static contents_notes_DT FillInfoObject(SqlDataReader dr)
        {

           contents_notes_DT obj_contents_notes_DT = new contents_notes_DT();

           
		obj_contents_notes_DT.id = Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.id.ToString()]);
		obj_contents_notes_DT.content_type = dr[contents_notes_DT.Enum_contents_notes_DT.content_type.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.content_type.ToString()]);
		obj_contents_notes_DT.content_id = dr[contents_notes_DT.Enum_contents_notes_DT.content_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.content_id.ToString()]);
		obj_contents_notes_DT.error_id = dr[contents_notes_DT.Enum_contents_notes_DT.error_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.error_id.ToString()]);
		obj_contents_notes_DT.correction_done = dr[contents_notes_DT.Enum_contents_notes_DT.correction_done.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.correction_done.ToString()]);
		obj_contents_notes_DT.usage_id = dr[contents_notes_DT.Enum_contents_notes_DT.usage_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.usage_id.ToString()]);
		obj_contents_notes_DT.field_id = dr[contents_notes_DT.Enum_contents_notes_DT.field_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.field_id.ToString()]);
		obj_contents_notes_DT.error_type = dr[contents_notes_DT.Enum_contents_notes_DT.error_type.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.error_type.ToString()]);
		obj_contents_notes_DT.error_status = dr[contents_notes_DT.Enum_contents_notes_DT.error_status.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.error_status.ToString()]);
		obj_contents_notes_DT.lang_id = dr[contents_notes_DT.Enum_contents_notes_DT.lang_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_notes_DT.Enum_contents_notes_DT.lang_id.ToString()]);
		obj_contents_notes_DT.error_place = dr[contents_notes_DT.Enum_contents_notes_DT.error_place.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[contents_notes_DT.Enum_contents_notes_DT.error_place.ToString()]);
		obj_contents_notes_DT.observer_note = dr[contents_notes_DT.Enum_contents_notes_DT.observer_note.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[contents_notes_DT.Enum_contents_notes_DT.observer_note.ToString()]);
		obj_contents_notes_DT.revision_note = dr[contents_notes_DT.Enum_contents_notes_DT.revision_note.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[contents_notes_DT.Enum_contents_notes_DT.revision_note.ToString()]);
		obj_contents_notes_DT.observer_note_date = dr[contents_notes_DT.Enum_contents_notes_DT.observer_note_date.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[contents_notes_DT.Enum_contents_notes_DT.observer_note_date.ToString()]);
		obj_contents_notes_DT.revision_note_date = dr[contents_notes_DT.Enum_contents_notes_DT.revision_note_date.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[contents_notes_DT.Enum_contents_notes_DT.revision_note_date.ToString()]);

           return obj_contents_notes_DT;
        }

        private static SqlParameter[] GetParameters(contents_notes_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[15];
           
			
        

        parms[0] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.id.ToString(), obj.id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.content_type.ToString(), obj.content_type);

        parms[2] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.content_id.ToString(), obj.content_id);

        parms[3] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.error_id.ToString(), obj.error_id);

        parms[4] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.correction_done.ToString(), obj.correction_done);

        parms[5] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.usage_id.ToString(), obj.usage_id);

        parms[6] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.field_id.ToString(), obj.field_id);

        parms[7] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.error_type.ToString(), obj.error_type);

        parms[8] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.error_status.ToString(), obj.error_status);

        parms[9] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.lang_id.ToString(), obj.lang_id);

        parms[10] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.error_place.ToString(), obj.error_place);

        parms[11] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.observer_note.ToString(), obj.observer_note);

        parms[12] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.revision_note.ToString(), obj.revision_note);

        parms[13] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.observer_note_date.ToString(), obj.observer_note_date);

        parms[14] = new SqlParameter(contents_notes_DT.Enum_contents_notes_DT.revision_note_date.ToString(), obj.revision_note_date);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(contents_notes_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "contents_notes_Save", parms);

             	    obj.id = Convert.ToInt32(parms[0].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int contents_notes_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "contents_notes_Delete", contents_notes_ID);
                return contents_notes_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "contents_notes_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }


        public static contents_notes_DT SelectByID(int contents_notes_ID)
        {
            try
            {
                SqlDataReader drTableName;
                contents_notes_DT oInfo_contents_notes_DT = new contents_notes_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "contents_notes_Select", contents_notes_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_contents_notes_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_contents_notes_DT;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static DataTable SelectByErrorID(int content_id, int content_type, int error_status, int test_error, int lang_id)
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "get_contents_notes_byerrorid", content_id, content_type, error_status, test_error,lang_id).Tables[0];

            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

