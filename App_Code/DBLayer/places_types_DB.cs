//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\maelalfy using Mcit Generator
// Class Name:		places_types_DB
// Date Generated:	19-04-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class places_types_DB
    {

        #region "Private methods"

        private static places_types_DT FillInfoObject(SqlDataReader dr)
        {

           places_types_DT obj_places_types_DT = new places_types_DT();

           
		obj_places_types_DT.id = Convert.ToInt32(dr[places_types_DT.Enum_places_types_DT.id.ToString()]);
		obj_places_types_DT.title_ar = dr[places_types_DT.Enum_places_types_DT.title_ar.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[places_types_DT.Enum_places_types_DT.title_ar.ToString()]);
		obj_places_types_DT.title_en = dr[places_types_DT.Enum_places_types_DT.title_en.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[places_types_DT.Enum_places_types_DT.title_en.ToString()]);
		obj_places_types_DT.title_fr = dr[places_types_DT.Enum_places_types_DT.title_fr.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[places_types_DT.Enum_places_types_DT.title_fr.ToString()]);

           return obj_places_types_DT;
        }

        private static SqlParameter[] GetParameters(places_types_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[4];
           
			
        

        parms[0] = new SqlParameter(places_types_DT.Enum_places_types_DT.id.ToString(), obj.id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(places_types_DT.Enum_places_types_DT.title_ar.ToString(), obj.title_ar);

        parms[2] = new SqlParameter(places_types_DT.Enum_places_types_DT.title_en.ToString(), obj.title_en);

        parms[3] = new SqlParameter(places_types_DT.Enum_places_types_DT.title_fr.ToString(), obj.title_fr);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(places_types_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "places_types_Save", parms);

             	    obj.id = Convert.ToInt32(parms[0].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int places_types_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "places_types_Delete", places_types_ID);
                return places_types_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "places_types_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static places_types_DT SelectByID(int places_types_ID)
        {
            try
            {
              if (places_types_ID > 0)
                {
                SqlDataReader drTableName;
                places_types_DT oInfo_places_types_DT = new places_types_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "places_types_Select", places_types_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_places_types_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_places_types_DT;
               }
                else
                    return new places_types_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

