//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\hdarwish using Mcit Generator
// Class Name:		characters_DB
// Date Generated:	01-07-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class characters_DB
    {

        #region "Private methods"

        private static characters_DT FillInfoObject(SqlDataReader dr)
        {

           characters_DT obj_characters_DT = new characters_DT();

           
		obj_characters_DT.highlight = dr[characters_DT.Enum_characters_DT.highlight.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.highlight.ToString()]);
		obj_characters_DT.status = dr[characters_DT.Enum_characters_DT.status.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.status.ToString()]);
		obj_characters_DT.highlight_panorama = dr[characters_DT.Enum_characters_DT.highlight_panorama.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.highlight_panorama.ToString()]);
		obj_characters_DT.id = Convert.ToInt32(dr[characters_DT.Enum_characters_DT.id.ToString()]);
		obj_characters_DT.char_type = dr[characters_DT.Enum_characters_DT.char_type.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.char_type.ToString()]);
		obj_characters_DT.assigned_to = dr[characters_DT.Enum_characters_DT.assigned_to.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.assigned_to.ToString()]);
		obj_characters_DT.form_status = dr[characters_DT.Enum_characters_DT.form_status.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.form_status.ToString()]);
		obj_characters_DT.file_status = dr[characters_DT.Enum_characters_DT.file_status.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.file_status.ToString()]);
		obj_characters_DT.form_lock = dr[characters_DT.Enum_characters_DT.form_lock.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.form_lock.ToString()]);
		obj_characters_DT.lock_files = dr[characters_DT.Enum_characters_DT.lock_files.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.lock_files.ToString()]);
		obj_characters_DT.period_id = dr[characters_DT.Enum_characters_DT.period_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.period_id.ToString()]);
		obj_characters_DT.form_status_en = dr[characters_DT.Enum_characters_DT.form_status_en.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.form_status_en.ToString()]);
		obj_characters_DT.form_lock_en = dr[characters_DT.Enum_characters_DT.form_lock_en.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.form_lock_en.ToString()]);
		obj_characters_DT.form_status_fr = dr[characters_DT.Enum_characters_DT.form_status_fr.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.form_status_fr.ToString()]);
		obj_characters_DT.form_lock_fr = dr[characters_DT.Enum_characters_DT.form_lock_fr.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.form_lock_fr.ToString()]);
		obj_characters_DT.gender = dr[characters_DT.Enum_characters_DT.gender.ToString()] == DBNull.Value ? null : Convert.ToString(dr[characters_DT.Enum_characters_DT.gender.ToString()]);
		obj_characters_DT.image_name = dr[characters_DT.Enum_characters_DT.image_name.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[characters_DT.Enum_characters_DT.image_name.ToString()]);
		obj_characters_DT.form_file = dr[characters_DT.Enum_characters_DT.form_file.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[characters_DT.Enum_characters_DT.form_file.ToString()]);
		obj_characters_DT.form_file_en = dr[characters_DT.Enum_characters_DT.form_file_en.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[characters_DT.Enum_characters_DT.form_file_en.ToString()]);
		obj_characters_DT.form_file_fr = dr[characters_DT.Enum_characters_DT.form_file_fr.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[characters_DT.Enum_characters_DT.form_file_fr.ToString()]);
        obj_characters_DT.rblFormImage = dr[characters_DT.Enum_characters_DT.rblFormImage.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[characters_DT.Enum_characters_DT.rblFormImage.ToString()]);
        obj_characters_DT.period_id_multi = dr[characters_DT.Enum_characters_DT.period_id_multi.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[characters_DT.Enum_characters_DT.period_id_multi.ToString()]);
        
           return obj_characters_DT;
        }

        private static SqlParameter[] GetParameters(characters_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[22];
           
			

        parms[0] = new SqlParameter(characters_DT.Enum_characters_DT.highlight.ToString(), obj.highlight);

        parms[1] = new SqlParameter(characters_DT.Enum_characters_DT.status.ToString(), obj.status);

        parms[2] = new SqlParameter(characters_DT.Enum_characters_DT.highlight_panorama.ToString(), obj.highlight_panorama);
        

        parms[3] = new SqlParameter(characters_DT.Enum_characters_DT.id.ToString(), obj.id);
        parms[3].Direction = ParameterDirection.InputOutput;

        parms[4] = new SqlParameter(characters_DT.Enum_characters_DT.char_type.ToString(), obj.char_type);

        parms[5] = new SqlParameter(characters_DT.Enum_characters_DT.assigned_to.ToString(), obj.assigned_to);

        parms[6] = new SqlParameter(characters_DT.Enum_characters_DT.form_status.ToString(), obj.form_status);

        parms[7] = new SqlParameter(characters_DT.Enum_characters_DT.file_status.ToString(), obj.file_status);

        parms[8] = new SqlParameter(characters_DT.Enum_characters_DT.form_lock.ToString(), obj.form_lock);

        parms[9] = new SqlParameter(characters_DT.Enum_characters_DT.lock_files.ToString(), obj.lock_files);

        parms[10] = new SqlParameter(characters_DT.Enum_characters_DT.period_id.ToString(), obj.period_id);

        parms[11] = new SqlParameter(characters_DT.Enum_characters_DT.form_status_en.ToString(), obj.form_status_en);

        parms[12] = new SqlParameter(characters_DT.Enum_characters_DT.form_lock_en.ToString(), obj.form_lock_en);

        parms[13] = new SqlParameter(characters_DT.Enum_characters_DT.form_status_fr.ToString(), obj.form_status_fr);

        parms[14] = new SqlParameter(characters_DT.Enum_characters_DT.form_lock_fr.ToString(), obj.form_lock_fr);

        parms[15] = new SqlParameter(characters_DT.Enum_characters_DT.gender.ToString(), obj.gender);

        parms[16] = new SqlParameter(characters_DT.Enum_characters_DT.image_name.ToString(), obj.image_name);

        parms[17] = new SqlParameter(characters_DT.Enum_characters_DT.form_file.ToString(), obj.form_file);

        parms[18] = new SqlParameter(characters_DT.Enum_characters_DT.form_file_en.ToString(), obj.form_file_en);

        parms[19] = new SqlParameter(characters_DT.Enum_characters_DT.form_file_fr.ToString(), obj.form_file_fr);

        parms[20] = new SqlParameter(characters_DT.Enum_characters_DT.rblFormImage.ToString(), obj.rblFormImage);
        parms[21] = new SqlParameter(characters_DT.Enum_characters_DT.period_id_multi.ToString(), obj.period_id_multi);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(characters_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "characters_Save", parms);

             	    obj.id = Convert.ToInt32(parms[3].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int characters_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "characters_Delete", characters_ID);
                return characters_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "characters_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static characters_DT SelectByID(int characters_ID)
        {
            try
            {
              if (characters_ID > 0)
                {
                SqlDataReader drTableName;
                characters_DT oInfo_characters_DT = new characters_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "characters_Select", characters_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_characters_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_characters_DT;
               }
                else
                    return new characters_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

