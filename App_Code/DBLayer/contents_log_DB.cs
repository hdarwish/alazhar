//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\nmsoltan using Mcit Generator
// Class Name:		contents_log_DB
// Date Generated:	31-10-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class contents_log_DB
    {

        #region "Private methods"

        private static contents_log_DT FillInfoObject(SqlDataReader dr)
        {

           contents_log_DT obj_contents_log_DT = new contents_log_DT();

           
		obj_contents_log_DT.id = Convert.ToInt32(dr[contents_log_DT.Enum_contents_log_DT.id.ToString()]);
		obj_contents_log_DT.content_type = dr[contents_log_DT.Enum_contents_log_DT.content_type.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_log_DT.Enum_contents_log_DT.content_type.ToString()]);
		obj_contents_log_DT.content_id = dr[contents_log_DT.Enum_contents_log_DT.content_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_log_DT.Enum_contents_log_DT.content_id.ToString()]);
		obj_contents_log_DT.operation_id = dr[contents_log_DT.Enum_contents_log_DT.operation_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_log_DT.Enum_contents_log_DT.operation_id.ToString()]);
		obj_contents_log_DT.user_id = dr[contents_log_DT.Enum_contents_log_DT.user_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_log_DT.Enum_contents_log_DT.user_id.ToString()]);
		obj_contents_log_DT.lang_id = dr[contents_log_DT.Enum_contents_log_DT.lang_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[contents_log_DT.Enum_contents_log_DT.lang_id.ToString()]);
		obj_contents_log_DT.note_date = dr[contents_log_DT.Enum_contents_log_DT.note_date.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[contents_log_DT.Enum_contents_log_DT.note_date.ToString()]);

           return obj_contents_log_DT;
        }

        private static SqlParameter[] GetParameters(contents_log_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[7];
           
			
        

        parms[0] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.id.ToString(), obj.id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.content_type.ToString(), obj.content_type);

        parms[2] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.content_id.ToString(), obj.content_id);

        parms[3] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.operation_id.ToString(), obj.operation_id);

        parms[4] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.user_id.ToString(), obj.user_id);

        parms[5] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.lang_id.ToString(), obj.lang_id);

        parms[6] = new SqlParameter(contents_log_DT.Enum_contents_log_DT.note_date.ToString(), obj.note_date);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(contents_log_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "contents_log_Save", parms);

             	    obj.id = Convert.ToInt32(parms[0].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int contents_log_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "contents_log_Delete", contents_log_ID);
                return contents_log_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "contents_log_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static contents_log_DT SelectByID(int contents_log_ID)
        {
            try
            {
              if (contents_log_ID > 0)
                {
                SqlDataReader drTableName;
                contents_log_DT oInfo_contents_log_DT = new contents_log_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "contents_log_Select", contents_log_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_contents_log_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_contents_log_DT;
               }
                else
                    return new contents_log_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }


        public static DataTable SelectByOperationID(int OperationID, int content_id, int content_type, int lang)
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "getlog", OperationID, content_id, content_type, lang).Tables[0];

            }
            catch (Exception ex)
            {

                return null;
            }
        }


       
        public static DataTable SelectByUserID(int OperationID, int content_id, int content_type, int user_id)
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "getlog_byuser_id", OperationID, content_id, content_type, user_id).Tables[0];

            }



            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

